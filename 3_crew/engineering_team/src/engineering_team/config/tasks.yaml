design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    Write a professional gradio UI in a module app.py that demonstrates the given backend class in {module_name}.
    Create a beautiful, modern web interface that can be accessed from localhost with proper error handling and user feedback.
    The UI should:
    - Be accessible via localhost with proper server configuration
    - Have a modern, professional design with good UX
    - Include real-time updates and feedback
    - Handle errors gracefully with user-friendly messages
    - Show current portfolio status and transaction history
    - Include input validation and confirmation dialogs
    - Use proper layout with tabs or sections for different functions
    Here are the requirements: {requirements}
  expected_output: >
    A professional gradio UI in module app.py with:
    - Modern layout and styling
    - Localhost server configuration (host="0.0.0.0", server_port=7860, share=False)
    - Real-time portfolio updates
    - Error handling and user feedback
    - Input validation
    - Professional styling and layout
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py

test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}

deployment_task:
  description: >
    Create a production-ready launch script that:
    - Runs the {module_name} application on localhost
    - Handles all dependencies and virtual environment setup
    - Provides clear instructions for users
    - Includes error handling and logging
    - Configures the app to be accessible via http://localhost:7860
    - Creates a README with setup and usage instructions
    - Includes a requirements.txt file if needed
  expected_output: >
    A launch script (run_app.py or run_app.sh) and a README.md with:
    - Step-by-step setup instructions
    - How to access the application via localhost
    - Troubleshooting guide
    - Dependencies and requirements
    IMPORTANT: Output ONLY the raw script/text content without any markdown formatting or code block delimiters.
  agent: deployment_engineer
  context:
    - frontend_task
    - code_task
  output_file: output/README.md
